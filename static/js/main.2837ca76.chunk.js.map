{"version":3,"sources":["parser/DeckParserArena/index.js","parser/DeckParser/index.js","components/DeckSection/index.js","components/TwoColumnView/index.js","components/DeckView/index.js","components/DeckView/service.js","services/CardService/index.js","config/index.js","App.js","index.js"],"names":["COMMANDER","COMPANION","DECK","REGEX","getLinesSanitized","text","split","map","l","trim","toUpperCase","parseLine","line","parsed","match","count","card_name","set","collector_number","getCommander","lines","index","findIndex","test","getCompanion","getMainDeck","deck","i","length","push","getSideboard","sd","indexOf","companion","commander","sideboard","parseDeck","DeckParserArena","useStyles","makeStyles","table","tableLayout","tableHeader","colspan","textAlign","tableCount","width","overflow","padding","DeckSection","props","classes","section","entries","handleCardFocused","handleCardUnfocused","handleSelectEntry","sort","e1","e2","data","cmc","preventDefault","event","handlePopoverOpen","entry","handlePopoverClose","handleClickEntry","filter","e","Typography","variant","className","key","id","display","onMouseEnter","onMouseLeave","onClick","Link","href","name","TwoColumnView","sections","colSize","arr","reduce","r","c","sectionNames","Object","keys","k","columnMax","leftColumnSections","rightColumnSections","Grid","container","item","xs","root","margin","tblHeader","img","maxWidth","float","DeckView","React","useState","preview","setPreview","selected","setSelected","deckSectionProps","image_uris","normal","creature","planeswalker","instant","sorcery","artifact","enchantment","land","mainDeckEntries","type_line","startsWith","filterPlaneswalker","filterInstant","filterSorcery","filterArtifact","filterEnchantment","filterLand","sideboardEntries","getMainDeckSections","Paper","elevation","spacing","src","alt","getDeckIdentifiers","identifiers","populateScryfallData","findEntryData","forEach","deckEntry","find","d","getCards","a","axios","post","res","theme","backdrop","zIndex","drawer","color","fab","position","bottom","right","App","setDeck","snackbar","setSnackbar","loading","setLoading","navigator","clipboard","readText","console","error","message","Container","Fab","extendedIcon","Snackbar","open","autoHideDuration","onClose","Backdrop","CircularProgress","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2837ca76.chunk.js","sourcesContent":["const CRLF = '\\n';\r\nconst COMMANDER = /^(COMMANDER|COMANDANTE)/;\r\nconst COMPANION = /^(COMPANION|COMPAÃ‘ERO)/;\r\nconst DECK = /^(DECK|MAZO)/;\r\nconst SIDEBOARD = 'SIDEBOARD';\r\nconst REGEX = /^([0-9]+)\\s([^(]*)\\s\\((.*)\\)\\s([0-9]+)/;\r\n\r\nconst getLinesSanitized = (text) => {\r\n    let lines = text.split(CRLF);\r\n    return lines.map(l => l.trim().toUpperCase());\r\n};\r\n\r\nconst parseLine = (line) => {\r\n    let parsed = line.match(REGEX);\r\n    return {\r\n        count: parsed[1],\r\n        card_name: parsed[2],\r\n        set: parsed[3],\r\n        collector_number: parsed[4],\r\n    }\r\n};\r\n\r\nconst getCommander = (text) => {\r\n    let lines = getLinesSanitized(text);\r\n    let index = lines.findIndex(line => COMMANDER.test(line));\r\n    if (index >= 0) {\r\n        return parseLine(lines[index + 1]);\r\n    }\r\n};\r\n\r\nconst getCompanion = (text) => {\r\n    let lines = getLinesSanitized(text);\r\n    let index = lines.findIndex(line => COMPANION.test(line));\r\n    if (index >= 0) {\r\n        return parseLine(lines[index + 1]);\r\n    }\r\n};\r\n\r\nconst getMainDeck = (text) => {\r\n    let lines = getLinesSanitized(text);\r\n    let deck = [];\r\n    let index = lines.findIndex(line => DECK.test(line));\r\n    for (let i = index + 1; i < lines.length; i++) {\r\n        let line = lines[i];\r\n        if (0 !== line.length) {\r\n            deck.push(parseLine(line));\r\n        } else {\r\n            break;\r\n        }\r\n    }\r\n    return deck;\r\n};\r\n\r\nconst getSideboard = (text) => {\r\n    let lines = getLinesSanitized(text);\r\n    let sd = [];\r\n    for (let i = lines.indexOf(SIDEBOARD) + 1; i < lines.length; i++) {\r\n        let line = lines[i];\r\n        if (0 !== line.length) {\r\n            sd.push(parseLine(line));\r\n        } else {\r\n            break;\r\n        }\r\n    }\r\n    return sd;\r\n};\r\n\r\nconst parseDeck = (text) => {\r\n    return {\r\n        companion: getCompanion(text),\r\n        commander: getCommander(text),\r\n        deck: getMainDeck(text),\r\n        sideboard: getSideboard(text)\r\n    }\r\n};\r\n\r\nexport default {parseDeck}","import DeckParserArena from '../DeckParserArena'\r\n\r\nexport const parseDeck = (text) => {\r\n    // TODO Validate format - consider different formats\r\n    return DeckParserArena.parseDeck(text);\r\n}\r\n\r\n","import React, {Fragment} from \"react\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Link from \"@material-ui/core/Link\";\r\n\r\nconst useStyles = makeStyles({\r\n    table: {\r\n        tableLayout: 'fixed',\r\n    },\r\n    tableHeader: {\r\n        colspan: 2,\r\n        textAlign: 'left',\r\n    },\r\n    tableCount: {\r\n        textAlign: 'right',\r\n        width: '20px',\r\n        overflow: 'hidden',\r\n        padding: '0 5px 0 0'\r\n    }\r\n});\r\n\r\nfunction DeckSection(props) {\r\n    const classes = useStyles();\r\n    const { section, entries, handleCardFocused, handleCardUnfocused, handleSelectEntry } = props;\r\n\r\n    if (entries && entries.length > 0) {\r\n        // sort by cmc\r\n        entries.sort((e1, e2) => e1.data.cmc - e2.data.cmc);\r\n    }\r\n\r\n    const preventDefault = (event) => event.preventDefault();\r\n\r\n    const handlePopoverOpen = (entry) => () => {\r\n        handleCardFocused(entry);\r\n    };\r\n\r\n    const handlePopoverClose = (entry) => () => {\r\n        handleCardUnfocused(entry);\r\n    };\r\n\r\n    const handleClickEntry = (entry) => () => {\r\n        handleSelectEntry(entry);\r\n    };\r\n\r\n    if (entries && entries.filter(e => e).length > 0) {\r\n        return (\r\n            <Fragment>\r\n                <Typography variant=\"subtitle2\">\r\n                    {section}\r\n                </Typography>\r\n                <table className={classes.table}>\r\n                    <tbody>\r\n                        {entries.filter(e => e).map(e => {\r\n                            return (<tr key={e.data.id}>\r\n                                <td className={classes.tableCount}>\r\n                                    <Typography\r\n                                        variant=\"body2\"\r\n                                        display=\"block\"\r\n                                        onMouseEnter={handlePopoverOpen(e)}\r\n                                        onMouseLeave={handlePopoverClose(e)}\r\n                                        onClick={handleClickEntry(e)}\r\n                                    >\r\n                                        <Link href=\"#\" onClick={preventDefault}>\r\n                                            {e.count}\r\n                                        </Link>\r\n                                    </Typography>\r\n                                </td>\r\n                                <td>\r\n                                    <Typography\r\n                                        variant=\"body2\"\r\n                                        display=\"block\"\r\n                                        onMouseEnter={handlePopoverOpen(e)}\r\n                                        onMouseLeave={handlePopoverClose(e)}\r\n                                        onClick={handleClickEntry(e)}\r\n                                    >\r\n                                        <Link href=\"#\" onClick={preventDefault}>\r\n                                            {e.data.name}\r\n                                        </Link>\r\n                                    </Typography>\r\n                                </td>\r\n                            </tr>);\r\n                        })}\r\n                    </tbody>\r\n                </table>\r\n            </Fragment>\r\n        );\r\n    }\r\n\r\n    return null;\r\n}\r\n\r\nexport default DeckSection;","import DeckSection from \"../DeckSection\";\r\nimport React from \"react\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\n\r\nfunction TwoColumnView(props) {\r\n    const { sections } = props;\r\n\r\n    const colSize = (arr) => {\r\n        return arr.reduce((r, c) => r + sections[c].length, 0);\r\n    };\r\n\r\n    let sectionNames = Object.keys(sections).filter(k => sections[k].length > 0);\r\n    let columnMax = colSize(sectionNames) / 2;\r\n    let leftColumnSections = [];\r\n    let rightColumnSections = [];\r\n    for (let i = 0; i < sectionNames.length; i++) {\r\n        if (colSize(leftColumnSections) < columnMax) {\r\n            leftColumnSections.push(sectionNames[i]);\r\n        } else {\r\n            rightColumnSections.push(sectionNames[i]);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Grid container>\r\n            <Grid item xs={6}>\r\n                {leftColumnSections.map(k => <DeckSection key={k} {...props} section={k} entries={sections[k]} />)}\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n                {rightColumnSections.map(k => <DeckSection key={k} {...props} section={k} entries={sections[k]} />)}\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n}\r\n\r\nexport default TwoColumnView;","import React from \"react\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport DeckSection from \"../DeckSection\";\r\nimport TwoColumnView from \"../TwoColumnView\";\r\nimport {getMainDeckSections} from \"./service\";\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        padding: '30px',\r\n        margin: '30px 0 0 0'\r\n    },\r\n    tblHeader: {\r\n        colspan: 2,\r\n        textAlign: 'left',\r\n    },\r\n    img: {\r\n        maxWidth: '336px',\r\n        float: 'right',\r\n    },\r\n});\r\n\r\nfunction DeckView(props) {\r\n    const classes = useStyles();\r\n    const { deck } = props;\r\n    const [ preview, setPreview ] = React.useState(\"\");\r\n    const [ selected, setSelected ] = React.useState({});\r\n\r\n    const handleCardFocused = (entry) => {\r\n        setPreview(entry.data.image_uris.normal);\r\n    };\r\n\r\n    const handleCardUnfocused = () => {\r\n        if (selected.data) {\r\n            setPreview(selected.data.image_uris.normal);\r\n        }\r\n    };\r\n\r\n    const handleSelectEntry = (entry) => {\r\n        setSelected(entry);\r\n    };\r\n\r\n    const deckSectionProps = {\r\n        handleCardFocused,\r\n        handleCardUnfocused,\r\n        handleSelectEntry,\r\n    };\r\n\r\n    const sections = getMainDeckSections(deck);\r\n\r\n    return (\r\n        <Paper elevation={3} className={classes.root}>\r\n            <Grid container spacing={1}>\r\n                <Grid item xs={8}>\r\n                    <Grid container>\r\n                        <Grid item xs={12}>\r\n                            <DeckSection\r\n                                section=\"Commander\"\r\n                                entries={[deck.commander]}\r\n                                {...deckSectionProps}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                            <DeckSection\r\n                                section=\"Companion\"\r\n                                entries={[deck.companion]}\r\n                                {...deckSectionProps}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item xs={12}>\r\n                            <TwoColumnView\r\n                                sections={sections}\r\n                                {...deckSectionProps}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid item xs={4}>\r\n                    <img\r\n                        src={preview}\r\n                        alt=\"\"\r\n                        className={classes.img}\r\n                    />\r\n                </Grid>\r\n            </Grid>\r\n        </Paper>\r\n    );\r\n}\r\n\r\nexport default DeckView;","const CREATURE = 'Creature';\r\nconst PLANESWALKER = 'Planeswalker';\r\nconst INSTANT = 'Instant';\r\nconst SORCERY = 'Sorcery';\r\nconst ARTIFACT = 'Artifact';\r\nconst ENCHANTMENT = 'Enchantment';\r\nconst LAND = 'Land';\r\nconst SIDEBOARD = 'Sideboard';\r\n\r\nexport const SUB_SECTIONS = [\r\n    CREATURE,\r\n    PLANESWALKER,\r\n    INSTANT,\r\n    SORCERY,\r\n    ARTIFACT,\r\n    ENCHANTMENT,\r\n    LAND,\r\n    SIDEBOARD\r\n];\r\n\r\nconst filterCreature = (entries) => entries.filter(e => e.data.type_line.startsWith(\"Creature\"));\r\nconst filterPlaneswalker = (entries) => entries.filter(e => e.data.type_line.startsWith(\"Legendary Planeswalker\"));\r\nconst filterInstant = (entries) => entries.filter(e => e.data.type_line.startsWith(\"Instant\"));\r\nconst filterSorcery = (entries) => entries.filter(e => e.data.type_line.startsWith(\"Sorcery\"));\r\nconst filterArtifact = (entries) => entries.filter(e => e.data.type_line.startsWith(\"Artifact\"));\r\nconst filterEnchantment = (entries) => entries.filter(e => e.data.type_line.startsWith(\"Enchantment\"));\r\nconst filterLand = (entries) => entries.filter(e => e.data.type_line.startsWith(\"Land\") || e.data.type_line.startsWith(\"Basic Land\") );\r\n\r\nexport const getMainDeckSections = (deck) => {\r\n    let creature = [];\r\n    let planeswalker = [];\r\n    let instant = [];\r\n    let sorcery = [];\r\n    let artifact = [];\r\n    let enchantment = [];\r\n    let land = [];\r\n    let sideboard = [];\r\n\r\n    let mainDeckEntries = deck.deck;\r\n    if (mainDeckEntries && mainDeckEntries.length > 0) {\r\n        creature = filterCreature(mainDeckEntries);\r\n        planeswalker = filterPlaneswalker(mainDeckEntries);\r\n        instant = filterInstant(mainDeckEntries);\r\n        sorcery = filterSorcery(mainDeckEntries);\r\n        artifact = filterArtifact(mainDeckEntries);\r\n        enchantment = filterEnchantment(mainDeckEntries);\r\n        land = filterLand(mainDeckEntries);\r\n    }\r\n\r\n    let sideboardEntries = deck.sideboard;\r\n    if (sideboardEntries && sideboardEntries.length > 0) {\r\n        sideboard = sideboardEntries;\r\n    }\r\n\r\n    return {\r\n        [CREATURE]: creature,\r\n        [PLANESWALKER]: planeswalker,\r\n        [INSTANT]: instant,\r\n        [SORCERY]: sorcery,\r\n        [ARTIFACT]: artifact,\r\n        [ENCHANTMENT]: enchantment,\r\n        [LAND]: land,\r\n        [SIDEBOARD]: sideboard\r\n    };\r\n};","import axios from 'axios';\r\nimport {SCRYFALL_COLLECTION_URL} from '../../config'\r\n\r\nconst getDeckIdentifiers = (deck) => {\r\n    const identifiers = [];\r\n    if (deck.companion) {\r\n        identifiers.push({\r\n                \"set\": deck.companion.set,\r\n                \"collector_number\": deck.companion.collector_number\r\n        });\r\n    }\r\n    if (deck.commander) {\r\n        identifiers.push({\r\n            \"set\": deck.commander.set,\r\n            \"collector_number\": deck.commander.collector_number\r\n        });\r\n    }\r\n    if (deck.deck && deck.deck.length > 0) {\r\n        identifiers.push(...deck.deck.map(i => {\r\n            return {\r\n                \"set\": i.set,\r\n                \"collector_number\": i.collector_number\r\n            }\r\n        }));\r\n    }\r\n    if (deck.sideboard && deck.sideboard.length > 0) {\r\n        identifiers.push(...deck.sideboard.map(i => {\r\n            return {\r\n                \"set\": i.set,\r\n                \"collector_number\": i.collector_number\r\n            }\r\n        }));\r\n    }\r\n\r\n    return identifiers;\r\n};\r\n\r\nconst populateScryfallData = (deck, data) => {\r\n    if (deck.companion) {\r\n        deck.companion.data = findEntryData(deck.companion, data);\r\n    }\r\n    if (deck.commander) {\r\n        deck.commander.data = findEntryData(deck.commander, data);\r\n    }\r\n    if (deck.deck && deck.deck.length > 0) {\r\n        deck.deck.forEach(e => {\r\n            e.data = findEntryData(e, data);\r\n        });\r\n    }\r\n    if (deck.sideboard && deck.sideboard.length > 0) {\r\n        deck.sideboard.forEach(e => {\r\n            e.data = findEntryData(e, data);\r\n        });\r\n    }\r\n\r\n    return deck;\r\n};\r\n\r\nconst findEntryData = (deckEntry, data) => {\r\n    return data.find(d => d.set.toUpperCase() === deckEntry.set.toUpperCase() && d.collector_number === deckEntry.collector_number);\r\n};\r\n\r\nexport const getCards = async (deck) => {\r\n    // TODO Chuck search to achive scryfall limit:\r\n    // A maximum of 75 card references may be submitted per request\r\n    const identifiers = getDeckIdentifiers(deck);\r\n    let res = await axios.post(SCRYFALL_COLLECTION_URL, { identifiers });\r\n    return populateScryfallData(deck, res.data.data);\r\n};","export const SCRYFALL_COLLECTION_URL = 'https://api.scryfall.com/cards/collection'","import React from 'react';\r\nimport {Container} from '@material-ui/core';\r\nimport PasteIcon from '@material-ui/icons/InsertDriveFile'\r\nimport './App.css';\r\nimport {parseDeck} from './parser/DeckParser';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport DeckView from \"./components/DeckView\";\r\nimport {getCards} from \"./services/CardService\";\r\nimport Backdrop from \"@material-ui/core/Backdrop\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\r\nimport Fab from \"@material-ui/core/Fab\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    backdrop: {\r\n        zIndex: theme.zIndex.drawer + 1,\r\n        color: '#fff',\r\n    },\r\n    fab: {\r\n        position: 'absolute',\r\n        bottom: 20,\r\n        right: 20,\r\n    },\r\n}));\r\n\r\nfunction App() {\r\n    const classes = useStyles();\r\n    const [deck, setDeck] = React.useState({});\r\n    const [snackbar, setSnackbar] = React.useState({});\r\n    const [loading, setLoading] = React.useState(false);\r\n\r\n    const handleCloseSnackbar = () => {\r\n        setSnackbar({});\r\n    };\r\n\r\n    const onClick = async () => {\r\n        try {\r\n            setLoading(true);\r\n            const text = await navigator.clipboard.readText();\r\n            const parsed = parseDeck(text);\r\n            const deck = await getCards(parsed);\r\n            setDeck(deck);\r\n        } catch (e) {\r\n            console.error(e);\r\n            setSnackbar({message: \"Error trying to parse the deck\"});\r\n        }\r\n        setLoading(false);\r\n    };\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <Container className=\"container\">\r\n                <Fab variant=\"extended\" className={classes.fab} onClick={onClick}>\r\n                    <PasteIcon className={classes.extendedIcon} />\r\n                    Paste\r\n                </Fab>\r\n                <DeckView deck={deck} />\r\n                <Snackbar\r\n                    open={snackbar.message}\r\n                    autoHideDuration={6000}\r\n                    onClose={handleCloseSnackbar}\r\n                    message={snackbar.message}\r\n                />\r\n                <Backdrop className={classes.backdrop} open={loading}>\r\n                    <CircularProgress />\r\n                </Backdrop>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}